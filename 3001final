#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <time.h>


struct teamResults{
    int teamNumber;
    int points;
} *tournamentResults;

void createTeamList(struct teamResults *tournamentResults, int totalTeams);
void arrangeTournament(struct teamResults *tournamentResults, int totalTeams);
void simulateGame(struct teamResults *tournamentResults, int i, int j);
void bubbleSort(struct teamResults *tournamentResults, int totalTeams);
void printFinalResults(struct teamResults *tournamentResults, int totalTeams);


int main(int argc, char *argv[]){
    srand(time(NULL)); //wonderful C without normal random generator
    int totalTeams = atoi(argv[1]);
    tournamentResults = malloc(totalTeams * sizeof(struct teamResults));
	createTeamList(tournamentResults, totalTeams);
    arrangeTournament(tournamentResults, totalTeams);
    bubbleSort(tournamentResults, totalTeams); //sort the array of structures in order to arrange the sorted output
    //the array is not so difficult, I think it's ok to use bubblesort in this case
	printFinalResults(tournamentResults, totalTeams);
    free(tournamentResults);
    return 0;
}


void createTeamList(struct teamResults *tournamentResults, int totalTeams)
{
    for (int i = 0; i < totalTeams; i++){
        tournamentResults[i].teamNumber = i;
    }
}


void arrangeTournament(struct teamResults *tournamentResults, int totalTeams)
{
    for (int i = 0; i < totalTeams; i++){
        for (int j = 0; j < totalTeams; j++){
            if (i != j){
                simulateGame(tournamentResults, i, j);
            }
        }
    }
}


void simulateGame(struct teamResults *tournamentResults, int i, int j)
{
    int eventProbability = rand()%100; 
	if (eventProbability > 0 && eventProbability <= 33){/*1/3 of total probability for draw scenario*/
		tournamentResults[i].points += 1;
		tournamentResults[j].points += 1;
	}
	else if (eventProbability > 33 && eventProbability < 77){/*more than 1/3 of total probability 
	for home game scenario*/
		tournamentResults[i].points += 3;
	}
	else{ /*less than 1/3 of total probability for guest game scenario*/
		tournamentResults[j].points += 3;
	}
}


void bubbleSort(struct teamResults *tournamentResults, int totalTeams)
{
    struct teamResults tmp;

    for (int i = 0; i < totalTeams; i++){
        for (int j = 0; j < totalTeams; j++){
            if (tournamentResults[j].points < tournamentResults[j+1].points){
                tmp = tournamentResults[j];
                tournamentResults[j] = tournamentResults[j+1];
                tournamentResults[j+1] = tmp;
            }
        }
    }
}


void printFinalResults(struct teamResults *tournamentResults, int totalTeams)
{
    for (int i = 0; i < totalTeams; i++){
        printf("%4d -    %4d\n", tournamentResults[i].teamNumber+1, tournamentResults[i].points); /* +1 in teamNumber 
        is added for appropriate output of team number*/
    }
}